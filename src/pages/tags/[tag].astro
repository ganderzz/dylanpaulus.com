---
import type { MarkdownInstance } from "astro";
import PostListItem from "~/src/components/PostListItem.astro";
import BaseLayout from "~/src/layouts/BaseLayout.astro";
import type { Post } from "~/src/types/Post";

export async function getStaticPaths() {
  function normalizeTag(tag: string): string {
    return tag.toLocaleLowerCase().replace(/\s+/g, "-");
  }

  const posts = await Astro.glob<Post>("../posts/**/*.md");
  const tags = posts
    .flatMap((post) => post.frontmatter.tags)
    .reduce((accu: Record<string, number>, tagName) => {
      const lowerTagName = normalizeTag(tagName);

      if (lowerTagName in accu) {
        return {
          ...accu,
          [lowerTagName]: accu[lowerTagName] + 1,
        };
      }

      return {
        ...accu,
        [lowerTagName]: 1,
      };
    }, {});

  return Object.entries(tags).map(([tag, count]) => ({
    params: {
      tag,
    },
    props: {
      count,
      posts: posts.filter((post) => post.frontmatter.tags.map(normalizeTag).includes(tag)),
    },
  }));
}

const { tag } = Astro.params;
const { count, posts } = Astro.props as { count: number; posts: MarkdownInstance<Post>[] };
---

<BaseLayout title={`${tag} | Dylan Paulus`} description={`A tags list for ${tag}`}>
  <section
    id="main-content"
    tab-index="-1"
    class="flex flex-col max-w-screen-sm md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl mx-auto mt-8"
  >
    <div class="flex items-center">
      <h2>{tag}</h2>
      <p class="ml-4 mt-4">- {count} article{count !== 1 && "s"}</p>
    </div>

    <div class="mt-8">{posts.map((post) => <PostListItem data={post} />)}</div>
  </section>
</BaseLayout>
